stages:
  - module-pipelines
  - deploy

frontend:
  stage: module-pipelines
  trigger:
    include:
      - "/frontend/.gitlab-ci.yml"
    strategy: depend # depend нужен, если какой-нибудь дочерний пайплайн свалился, мы знали, что общий пайплайн тоже идёт с ошибкой
  only:
    changes: # как только происходит изменение в папке frontend, запускается дочерний пайплайн, который лежит в этой папке
      - frontend/**/*

backend:
  stage: module-pipelines
  trigger:
    include:
      - "/backend/.gitlab-ci.yml"
    strategy: depend
  only:
    changes:  # как только происходит изменение в папке backend, запускается дочерний пайплайн, который лежит в этой папке
      - backend/**/*

backend-report:
  stage: module-pipelines
  trigger:
    include:
      - "/backend-report/.gitlab-ci.yml"
    strategy: depend
  only:
    changes:  # как только происходит изменение в папке backend-report, запускается дочерний пайплайн, который лежит в этой папке
      - backend-report/**/*

deploy-with-vault:
  stage: deploy
  image: alpine:3.15.0
  before_script:
    - apk add openssh-client bash docker docker-compose
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - scp docker-compose.yml ${DEV_USER}@${DEV_HOST}:/home/${DEV_USER}/
    - ssh ${DEV_USER}@${DEV_HOST}
      "export "VERSION=${VERSION}";
       export "MONGO_VAULT=${MONGO_VAULT}";
       export "PSQL_DATASOURCE=${PSQL_DATASOURCE}";
       export "PSQL_USER=${PSQL_USER}";
       export "PSQL_PASSWORD=${PSQL_PASSWORD}";
       export "VAULT_TOKEN=${VAULT_TOKEN}";
       export "VAULT_URL=${VAULT_URL}";
       export "CI_REGISTRY_IMAGE=${CI_REGISTRY_IMAGE}";
       export "CI_REGISTRY=${CI_REGISTRY}";
       export "CI_REGISTRY_PASSWORD=${CI_REGISTRY_PASSWORD}";
       export "CI_REGISTRY_USER=${CI_REGISTRY_USER}";
      /bin/bash -s " < ./deploy.sh
  rules:
#    - if: '$CI_COMMIT_BRANCH == null'    
    - if: '$CI_COMMIT_BRANCH == "microservices"'
      when: never
    - if: $CI_COMMIT_BRANCH
      when: manual

slack-message: # уведомляем в Slack
  stage: .post
  script:
    - echo "Send notify to Slack"
    - echo "${VERSION}"
    - >
      curl -X POST -H 'Content-type: application/json' --data '{"text":"Вышла новая версия сосисочной '${VERSION}'."}' https://hooks.slack.com/services/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
#  when: manual
  when: never
