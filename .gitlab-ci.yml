stages:
  - module-pipelines
  - deploy

frontend:
  stage: module-pipelines
  trigger:
    include:
      - "/frontend/.gitlab-ci.yml"
    strategy: depend # depend нужен, если какой-нибудь дочерний пайплайн свалился, мы знали, что общий пайплайн тоже идёт с ошибкой
  only:
    changes:
      - frontend/**/*
  except:
    - schedules

backend:
  stage: module-pipelines
  trigger:
    include:
      - "/backend/.gitlab-ci.yml"
    strategy: depend
  only:
    changes:
      - backend/**/*
  except:
    - schedules

backend-report:
  stage: module-pipelines
  trigger:
    include:
      - "/backend-report/.gitlab-ci.yml"
    strategy: depend
  only:
    changes:
      - backend-report/**/*
  except:
    - schedules

deploy-vault:
  stage: deploy
  image: alpine:3.15.0
  before_script:
    - apk add openssh-client bash docker docker-compose
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - docker context create remote --docker "host=ssh://${DEV_USER}@${DEV_HOST}"
    - docker --context remote login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker-compose -H ssh://${DEV_USER}@${DEV_HOST} up --detach vault
    - docker -H ssh://${DEV_USER}@${DEV_HOST} exec -i -e "VAULT_TOKEN=${VAULT_TOKEN}" vault ash -c "vault kv put secret/sausage-store spring.data.mongodb.uri=${MONGO_VAULT} spring.datasource.username=${PSQL_USER} spring.datasource.password=${PSQL_PASSWORD} spring.datasource.url=${PSQL_DATASOURCE}"
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always

deploy-certbot:
  stage: deploy
  image: alpine:3.15.0
  before_script:
    - apk add openssh-client bash docker docker-compose
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - docker context create remote --docker "host=ssh://${DEV_USER}@${DEV_HOST}"
  script:
    - docker-compose -H ssh://${DEV_USER}@${DEV_HOST} up --detach certbot
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"

slack-message:
  stage: .post
  script:
    - echo "Send notify to Slack"
    - >
      curl -X POST -H 'Content-type: application/json' --data '{"text":"Развернута новая версия сосисочной https://pashkov.hopto.org."}' https://hooks.slack.com/services/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
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: on_success
