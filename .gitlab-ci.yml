stages:
  - module-pipelines
  - deploy

frontend:
  stage: module-pipelines
  trigger:
    include:
      - "/frontend/.gitlab-ci.yml"
    strategy: depend # depend нужен, если какой-нибудь дочерний пайплайн свалился, мы знали, что общий пайплайн тоже идёт с ошибкой
  only:
    changes: # как только происходит изменение в папке frontend, запускается дочерний пайплайн, который лежит в этой папке
      - frontend/**/*

backend:
  stage: module-pipelines
  trigger:
    include:
      - "/backend/.gitlab-ci.yml"
    strategy: depend
  only:
    changes:  # как только происходит изменение в папке backend, запускается дочерний пайплайн, который лежит в этой папке
      - backend/**/*

backend-report:
  stage: module-pipelines
  trigger:
    include:
      - "/backend-report/.gitlab-ci.yml"
    strategy: depend
  only:
    changes:  # как только происходит изменение в папке backend-report, запускается дочерний пайплайн, который лежит в этой папке
      - backend-report/**/*

deploy-docker-compose:
  stage: deploy
  image: alpine:3.15.0
  #деплой по кнопке
  #rules:
  #  - if: $CI_COMMIT_BRANCH
  #    when: manual
  before_script:
    - apk add openssh-client bash
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - scp docker-compose.yml ${DEV_USER}@${DEV_HOST}:/home/${DEV_USER}/
    - ssh ${DEV_USER}@${DEV_HOST}
      "export "VERSION=${VERSION}";
       export "MONGO_DATA=${MONGO_DATA}";
       export "MONGO_DATA=mongodb://sudmedru:Testusr1234@rc1b-k6kxnzzdzwda1z36.mdb.yandexcloud.net:27018/sudmedru?tls=true&replicaSet=rs01";
       export "PSQL_DATASOURCE=${PSQL_DATASOURCE}";
       export "PSQL_USER=${PSQL_USER}";
       export "PSQL_PASSWORD=${PSQL_PASSWORD}";
       export "VAULT_TOKEN=${VAULT_TOKEN}";
       export "VAULT_URL=${VAULT_URL}";
       export "CI_REGISTRY_IMAGE=${CI_REGISTRY_IMAGE}";
       export "CI_REGISTRY=${CI_REGISTRY}";
       export "CI_REGISTRY_PASSWORD=${CI_REGISTRY_PASSWORD}";
       export "CI_REGISTRY_USER=${CI_REGISTRY_USER}";
      /bin/bash -s " < ./deploy.sh

slack-message: # уведомляем в Slack
  stage: .post
  script:
    - echo "Send notify to Slack"
    - >
      curl -X POST -H 'Content-type: application/json' --data "{\"blocks\":[{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"Сосисочная на микросервисах v. ${VERSION}.\"}},{\"type\":\"divider\"},{\"type\":\"context\",\"elements\":[{\"type\":\"mrkdwn\",\"text\":\"<@U03FRG969C6>\"}]}]}" https://hooks.slack.com/services/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
  when: on_success
