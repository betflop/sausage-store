variables:
   SAST_JAVA_VERSION: 17
   VERSION: 1.0.${CI_PIPELINE_ID}
   MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository
   SAST_EXCLUDED_ANALYZERS: "nodejs-scan"

include:
  - template: Security/SAST.gitlab-ci.yml
  - project: 'templates/ci'
    file: 'DockerInDockerTemplate.yml'

stages:
   - build
   - test
   - dockerize
   - release
   - deploy

build-backend-code-job:
   stage: build
   script:
      - echo "ARTIFACT_JOB_ID=${CI_JOB_ID}" > CI_JOB_ID.txt
      - cd backend
      - mvn package -Dversion.application=${VERSION} -Dmaven.repo.local=${MAVEN_REPO_PATH}
      - cd .. 
      - mkdir sausage-store-${VERSION}
      - mv backend/target/sausage-store-${VERSION}.jar sausage-store-${VERSION}/sausage-store-${VERSION}.jar
   artifacts:
    paths:
      - ${CI_PROJECT_DIR}/.m2/
      - sausage-store-${VERSION}/sausage-store-${VERSION}.jar 
    reports:
      dotenv: CI_JOB_ID.txt
   rules:
      - changes:
           - backend/**/*

spotbugs-sast:
  stage: test
  dependencies:
    - build-backend-code-job
#  variables:
#    COMPILE: "false"

sonarqube-backend-sast:
  stage: test
  image: maven:3.8-openjdk-16
  cache:
    key: ${CI_JOB_NAME}
    paths:
      - .sonar/cache
  script:
    - cd backend
    - >
      mvn verify sonar:sonar
      -Dversion.application=${VERSION}
      -Dsonar.qualitygate.wait=true
      -Dsonar.projectKey=${SONAR_PROJECT_KEY_BACK}
      -Dsonar.host.url=${SONARQUBE_URL}
      -Dsonar.login=${SONAR_LOGIN}
  dependencies:
    - build-backend-code-job
  rules:
    - changes:
      - backend/**/*

dockerize-backend:
  stage: dockerize
  image: docker:20.10.12-dind-rootless
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cd backend
    - >
      docker build
      --build-arg VERSION=$VERSION
      --tag $CI_REGISTRY_IMAGE/sausage-backend:$CI_COMMIT_SHA
      .
    - docker push $CI_REGISTRY_IMAGE/sausage-backend:$CI_COMMIT_SHA
  rules:
    - changes:
      - backend/**/*
  dependencies:
    - build-backend-code-job

release:
   stage: release
   script:
      - cd backend
      - mvn deploy -DskipTests -Dversion.application=${VERSION} -Dmaven.repo.local=${MAVEN_REPO_PATH} -s settings.xml
   rules:
      - changes:
           - backend/**/*
   #allow_failure: true

upload-backend-latest:
  variables:
    GIT_STRATEGY: none
  image: docker:20.10.12-dind-rootless
  stage: release
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE/sausage-backend:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE/sausage-backend:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/sausage-backend:latest
    - docker push $CI_REGISTRY_IMAGE/sausage-backend:latest

deploy-backend:
  stage: deploy
  image: alpine:3.15.0
  before_script:
    - apk add openssh-client bash docker docker-compose
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - docker context create remote --docker "host=ssh://${DEV_USER}@${DEV_HOST}"
    - docker --context remote login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
#    - docker-compose -H ssh://${DEV_USER}@${DEV_HOST} rm --stop --force backend
#    - docker-compose -H ssh://${DEV_USER}@${DEV_HOST} pull backend
#    - docker-compose -H ssh://${DEV_USER}@${DEV_HOST} up --detach --force-recreate --scale backend=${BACKEND_REPLICAS} backend
    - docker -H ssh://${DEV_USER}@${DEV_HOST} ps
    - docker-compose -H ssh://${DEV_USER}@${DEV_HOST} ps
    - docker-compose -H ssh://${DEV_USER}@${DEV_HOST} ps --services
    - echo "-------------------------------------------"
    - docker-compose -H ssh://${DEV_USER}@${DEV_HOST} rm --stop --force sausage-store_backend-blue_1 || true
    - if [ $(docker inspect -f '{{.State.Running}}' sausage-store_backend-green_1) = "true" ]; then
        docker-compose -H ssh://${DEV_USER}@${DEV_HOST} stop backend-blue;
        docker-compose -H ssh://${DEV_USER}@${DEV_HOST} rm -f backend-blue;
        docker-compose -H ssh://${DEV_USER}@${DEV_HOST} pull backend-blue;
        docker-compose -H ssh://${DEV_USER}@${DEV_HOST} up -d backend-blue;
        while [ $(docker inspect -f '{{.State.Health.Status}}' sausage-store_backend-blue_1) != "healthy" ]; do sleep 5; done;
        docker-compose -H ssh://${DEV_USER}@${DEV_HOST} stop backend-green;
        docker-compose -H ssh://${DEV_USER}@${DEV_HOST} rm -f backend-green;
      elif [ -z $(docker ps -q --filter name=sausage-store_backend-blue_1) ]; then
        docker-compose -H ssh://${DEV_USER}@${DEV_HOST} stop backend-green;
        docker-compose -H ssh://${DEV_USER}@${DEV_HOST} rm -f backend-green;
        docker-compose -H ssh://${DEV_USER}@${DEV_HOST} pull backend-green;
        docker-compose -H ssh://${DEV_USER}@${DEV_HOST} up -d backend-green;
        while [ $(docker inspect -f '{{.State.Health.Status}}' sausage-store_backend-green_1) != "healthy" ]; do sleep 5; done;
        docker-compose -H ssh://${DEV_USER}@${DEV_HOST} stop backend-blue;
        docker-compose -H ssh://${DEV_USER}@${DEV_HOST} rm -f backend-blue;
      else
        docker-compose -H ssh://${DEV_USER}@${DEV_HOST} pull backend-blue;
        docker-compose -H ssh://${DEV_USER}@${DEV_HOST} up -d backend-blue;
      fi
